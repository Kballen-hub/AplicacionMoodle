{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport search_combobox from 'core/comboboxsearch/search_combobox';\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport Dropdown from 'theme_boost/bootstrap/dropdown';\nimport {getStrings} from 'core/str';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport storage from 'core/localstorage';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        cancel: 'cancel',\n        save: 'save',\n        checked: 'input[type=\"checkbox\"]:checked',\n        currentlyUnchecked: 'input[type=\"checkbox\"]:not([data-action=\"selectall\"])',\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    sort: '[data-collapse=\"sort\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    rangerowcell: '[data-collapse=\"rangerowcell\"]',\n    avgrowcell: '[data-collapse=\"avgrowcell\"]',\n    menu: '[data-collapse=\"menu\"]',\n    icons: '.data-collapse_gradeicons',\n    count: '[data-collapse=\"count\"]',\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\n    fullDropdown: '.collapsecolumndropdown',\n    searchResultContainer: '.searchresultitemscontainer',\n    cellMenuButton: '.cellmenubtn',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\n\nexport default class ColumnSearch extends search_combobox {\n\n    userID = -1;\n    courseID = null;\n    defaultSort = '';\n\n    nodes = [];\n\n    gradeStrings = null;\n    userStrings = null;\n    stringMap = [];\n\n    static init(userID, courseID, defaultSort) {\n        return new ColumnSearch(userID, courseID, defaultSort);\n    }\n\n    constructor(userID, courseID, defaultSort) {\n        super();\n        this.userID = userID;\n        this.courseID = courseID;\n        this.defaultSort = defaultSort;\n        this.component = document.querySelector(selectors.component);\n\n        const pendingPromise = new Pending();\n        // Display a loader whilst collapsing appropriate columns (based on the locally stored state for the current user).\n        addIconToContainer(document.querySelector('.gradeparent')).then((loader) => {\n            setTimeout(() => {\n                // Get the users' checked columns to change.\n                this.getDataset().forEach((item) => {\n                    this.nodesUpdate(item);\n                });\n                this.renderDefault();\n\n                // Once the grade categories have been re-collapsed, remove the loader and display the Gradebook setup content.\n                loader.remove();\n                document.querySelector('.gradereport-grader-table').classList.remove('d-none');\n            }, 10);\n        }).then(() => pendingPromise.resolve()).catch(Notification.exception);\n\n        this.component.addEventListener('hide.bs.dropdown', () => {\n            const searchResultContainer = this.component.querySelector(selectors.searchResultContainer);\n            searchResultContainer.scrollTop = 0;\n\n            // Use setTimeout to make sure the following code is executed after the click event is handled.\n            setTimeout(() => {\n                if (this.searchInput.value !== '') {\n                    this.searchInput.value = '';\n                    this.searchInput.dispatchEvent(new Event('input', {bubbles: true}));\n                }\n            });\n        });\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    componentSelector() {\n        return '.collapse-columns';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    dropdownSelector() {\n        return '.searchresultitemscontainer';\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Array}\n     */\n    getDataset() {\n        if (!this.dataset) {\n            const cols = this.fetchDataset();\n            this.dataset = JSON.parse(cols) ? JSON.parse(cols).split(',') : [];\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {string}\n     */\n    fetchDataset() {\n        return storage.get(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`);\n    }\n\n    /**\n     * Given a user performs an action, update the users' preferences.\n     */\n    setPreferences() {\n        storage.set(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`,\n            JSON.stringify(this.getDataset().join(','))\n        );\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        document.addEventListener('click', this.docClickHandler.bind(this));\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        super.clickHandler(e);\n        // Prevent BS from closing the dropdown if they click elsewhere within the dropdown besides the form.\n        if (e.target.closest(selectors.fullDropdown)) {\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * Externally defined click function to improve memory handling.\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<void>}\n     */\n    async docClickHandler(e) {\n        if (e.target.dataset.hider === selectors.hider) {\n            e.preventDefault();\n            const pendingPromise = new Pending('gradereport_grader/collapse:docClickHandler:hide');\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = this.getDataset().indexOf(desiredToHide);\n            if (idx === -1) {\n                this.getDataset().push(desiredToHide);\n            }\n            await this.prefcountpipe();\n\n            await this.nodesUpdate(desiredToHide);\n            pendingPromise.resolve();\n        }\n\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n            e.preventDefault();\n            const pendingPromise = new Pending('gradereport_grader/collapse:docClickHandler:expand');\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = this.getDataset().indexOf(desiredToHide);\n            this.getDataset().splice(idx, 1);\n\n            await this.prefcountpipe();\n\n            await this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.col);\n            await this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.itemid);\n            pendingPromise.resolve();\n        }\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            if (this.getSearchTerm() === this.searchInput.value && this.searchResultsVisible()) {\n                window.console.warn(`Search term matches input value - skipping`);\n                // Debounce can happen multiple times quickly.\n                return;\n            }\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            const pendingPromise = new Pending();\n            // User has given something for us to filter against.\n            await this.filterrenderpipe().then(() => {\n                pendingPromise.resolve();\n                return true;\n            });\n        }, 300, {pending: true}));\n    }\n\n    /**\n     * Handle the form submission within the dropdown.\n     */\n    registerFormEvents() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const events = [\n            'click',\n            CustomEvents.events.activate,\n            CustomEvents.events.keyboardActivate\n        ];\n        CustomEvents.define(document, events);\n\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\n\n        // Register clicks & keyboard form handling.\n        events.forEach((event) => {\n            const submitBtn = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\n            form.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                const input = e.target.closest('input');\n                if (input) {\n                    // If the user is unchecking an item, we need to uncheck the select all if it's checked.\n                    if (selectall.checked && !input.checked) {\n                        selectall.checked = false;\n                    }\n                    const checkedCount = Array.from(form.querySelectorAll(selectors.formItems.checked)).length;\n                    // Check if any are clicked or not then change disabled.\n                    submitBtn.disabled = checkedCount <= 0;\n                }\n            }, false);\n\n            // Stop Bootstrap from being clever.\n            this.searchInput.addEventListener(event, e => e.stopPropagation());\n            this.clearSearchButton.addEventListener(event, async(e) => {\n                e.stopPropagation();\n                this.searchInput.value = '';\n                this.setSearchTerms(this.searchInput.value);\n                await this.filterrenderpipe();\n            });\n            selectall.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                if (!selectall.checked) {\n                    const touncheck = Array.from(form.querySelectorAll(selectors.formItems.checked));\n                    touncheck.forEach(item => {\n                        item.checked = false;\n                    });\n                    submitBtn.disabled = true;\n                } else {\n                    const currentUnchecked = Array.from(form.querySelectorAll(selectors.formItems.currentlyUnchecked));\n                    currentUnchecked.forEach(item => {\n                        item.checked = true;\n                    });\n                    submitBtn.disabled = false;\n                }\n            });\n        });\n\n        form.addEventListener('submit', async(e) => {\n            e.preventDefault();\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\n                Dropdown.getOrCreateInstance(this.component).toggle();\n                return;\n            }\n            // Get the users' checked columns to change.\n            const checkedItems = [...form.elements].filter(item => item.checked);\n            checkedItems.forEach((item) => {\n                const idx = this.getDataset().indexOf(item.dataset.collapse);\n                this.getDataset().splice(idx, 1);\n                this.nodesUpdate(item.dataset.collapse);\n            });\n            // Reset the check all & submit to false just in case.\n            selectall.checked = false;\n            e.submitter.disabled = true;\n            await this.prefcountpipe();\n        });\n    }\n\n    async nodesUpdate(item) {\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item}\"]`)];\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item}\"]`)];\n        const elements = [...colNodesToHide, ...itemIDNodesToHide];\n        if (elements && elements.length) {\n            const pendingPromise = new Pending('gradereport_grader/collapse:nodesUpdate:' + item);\n            this.updateDisplay(elements).then(() => pendingPromise.resolve()).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Update the user preferences, count display then render the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async prefcountpipe() {\n        this.setPreferences();\n        this.countUpdate();\n        await this.filterrenderpipe();\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\n     */\n    async filterDataset(filterableData) {\n        const stringUserMap = await this.fetchRequiredUserStrings();\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\n        // Custom user profile fields are not in our string map and need a bit of extra love.\n        const customFieldMap = this.fetchCustomFieldValues();\n        this.stringMap = new Map([...stringGradeMap, ...stringUserMap, ...customFieldMap]);\n\n        const searching = filterableData.map(s => {\n            const mapObj = this.stringMap.get(s);\n            if (mapObj === undefined) {\n                return {key: s, string: s};\n            }\n            return {\n                key: s,\n                string: mapObj.itemname ?? this.stringMap.get(s),\n                category: mapObj.category ?? '',\n            };\n        });\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return searching;\n        }\n        // Other times we want to actually filter the content.\n        return searching.filter((col) => {\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        });\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     */\n    filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((column) => {\n                return {\n                    name: column.key,\n                    displayName: column.string ?? column.key,\n                    category: column.category ?? '',\n                };\n            })\n        );\n    }\n\n    /**\n     * With an array of nodes, switch their classes and values.\n     *\n     * @param {Array} elements The elements to update.\n     */\n    async updateDisplay(elements) {\n        const promises = [];\n        elements.forEach((element) => {\n            promises.push(this.updateDisplayForElement(element));\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Update display for given element, switch its classes and values.\n     *\n     * @param {HTMLElement} element The element to update.\n     */\n    async updateDisplayForElement(element) {\n        const content = element.querySelector(selectors.content);\n        const sort = element.querySelector(selectors.sort);\n        const expandButton = element.querySelector(selectors.expandbutton);\n        const rangeRowCell = element.querySelector(selectors.rangerowcell);\n        const avgRowCell = element.querySelector(selectors.avgrowcell);\n        const cellMenuButton = element.querySelector(selectors.cellMenuButton);\n        const nodeSet = [\n            element.querySelector(selectors.menu),\n            element.querySelector(selectors.icons),\n            content\n        ];\n\n        // This can be further improved to reduce redundant similar calls.\n        if (element.classList.contains('cell')) {\n            // The column is actively being sorted, lets reset that and reload the page.\n            if (sort !== null) {\n                window.location = this.defaultSort;\n            }\n            if (content === null) {\n                // If it's not a content cell, it must be an overall average or a range cell.\n                const rowCell = avgRowCell ?? rangeRowCell;\n\n                rowCell?.classList.toggle('d-none');\n            } else if (content.classList.contains('d-none')) {\n                // We should always have content but some cells do not contain menus or other actions.\n                element.classList.remove('collapsed');\n                // If there are many nodes, apply the following.\n                if (content.childNodes.length > 1) {\n                    content.classList.add('d-flex');\n                }\n                nodeSet.forEach(node => {\n                    node?.classList.remove('d-none');\n                });\n                expandButton?.classList.add('d-none');\n                cellMenuButton?.focus();\n            } else {\n                element.classList.add('collapsed');\n                content.classList.remove('d-flex');\n                nodeSet.forEach(node => {\n                    node?.classList.add('d-none');\n                });\n                expandButton?.classList.remove('d-none');\n            }\n        }\n    }\n\n    /**\n     * Update the visual count of collapsed columns or hide the count all together.\n     */\n    countUpdate() {\n        countIndicator.textContent = this.getDatasetSize();\n        if (this.getDatasetSize() > 0) {\n            this.component.parentElement.classList.add('d-flex');\n            this.component.parentElement.classList.remove('d-none');\n        } else {\n            this.component.parentElement.classList.remove('d-flex');\n            this.component.parentElement.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(this.getDataset()));\n        this.filterMatchDataset();\n\n        // Update the collapsed button pill.\n        this.countUpdate();\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\n            'instance': this.instance,\n            'results': this.getMatchedResults(),\n            'userid': this.userID,\n        });\n        replaceNode(selectors.placeholder, html, js);\n        this.updateNodes();\n\n        // Given we now have the body, we can set up more triggers.\n        this.registerFormEvents();\n        this.registerInputEvents();\n\n        // Add a small BS listener so that we can set the focus correctly on open.\n        this.component.addEventListener('shown.bs.dropdown', () => {\n            this.searchInput.focus({preventScroll: true});\n            this.selectallEnable();\n        });\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\n            instance: this.instance,\n            'results': this.getMatchedResults(),\n            'searchTerm': this.getSearchTerm(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n        this.selectallEnable();\n        // Reset the expand button to be disabled as we have re-rendered the dropdown.\n        const form = this.component.querySelector(selectors.formDropdown);\n        const expandButton = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\n        expandButton.disabled = true;\n    }\n\n    /**\n     * Given we render the dropdown, Determine if we want to enable the select all checkbox.\n     */\n    selectallEnable() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\n        selectall.disabled = this.getMatchedResults().length === 0;\n    }\n\n    /**\n     * If we have any custom user profile fields, grab their system & readable names to add to our string map.\n     *\n     * @returns {array<string,*>} An array of associated string arrays ready for our map.\n     */\n    fetchCustomFieldValues() {\n        const customFields = document.querySelectorAll('[data-collapse-name]');\n        // Cast from NodeList to array to grab all the values.\n        return [...customFields].map(field => [field.parentElement.dataset.col, field.dataset.collapseName]);\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredUserStrings() {\n        if (!this.userStrings) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.userStrings;\n    }\n\n    /**\n     * Given the set of gradable items we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredGradeStrings() {\n        if (!this.gradeStrings) {\n            this.gradeStrings = Repository.gradeItems(this.courseID)\n                .then((result) => new Map(\n                    result.gradeItems.map(key => ([key.id, key]))\n                ));\n        }\n        return this.gradeStrings;\n    }\n}\n"],"names":["selectors","cancel","save","checked","currentlyUnchecked","countIndicator","document","querySelector","ColumnSearch","search_combobox","userID","courseID","defaultSort","nodes","gradeStrings","userStrings","stringMap","constructor","component","pendingPromise","Pending","then","loader","setTimeout","getDataset","forEach","item","nodesUpdate","renderDefault","remove","classList","resolve","catch","Notification","exception","addEventListener","this","scrollTop","searchInput","value","dispatchEvent","Event","bubbles","componentSelector","dropdownSelector","dataset","cols","fetchDataset","JSON","parse","split","datasetSize","length","storage","get","setPreferences","set","stringify","join","registerClickHandlers","clickHandler","bind","docClickHandler","e","target","closest","stopPropagation","hider","preventDefault","desiredToHide","_e$target$closest","col","_e$target$closest2","itemid","indexOf","push","prefcountpipe","_e$target$closest4","_e$target$closest5","idx","splice","_e$target$closest6","_e$target$closest7","registerInputEvents","async","getSearchTerm","searchResultsVisible","window","console","warn","setSearchTerms","clearSearchButton","add","filterrenderpipe","pending","registerFormEvents","form","events","CustomEvents","activate","keyboardActivate","define","selectall","event","submitBtn","input","checkedCount","Array","from","querySelectorAll","disabled","submitter","action","getOrCreateInstance","toggle","elements","filter","collapse","updateDisplay","countUpdate","filterableData","stringUserMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","customFieldMap","fetchCustomFieldValues","Map","searching","map","s","mapObj","undefined","key","string","itemname","category","getPreppedSearchTerm","toString","toLowerCase","includes","filterMatchDataset","setMatchedResults","getMatchedResults","column","name","displayName","promises","element","updateDisplayForElement","Promise","all","content","sort","expandButton","rangeRowCell","avgRowCell","cellMenuButton","nodeSet","contains","location","rowCell","childNodes","node","focus","textContent","getDatasetSize","parentElement","filterDataset","html","js","instance","updateNodes","preventScroll","selectallEnable","getHTMLElements","searchDropdown","field","collapseName","requiredStrings","stringArray","index","Repository","gradeItems","result","id"],"mappings":"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"}