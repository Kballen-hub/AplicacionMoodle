{"version":3,"file":"embedhandler.min.js","sources":["../../src/embed/embedhandler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed handler class.\n *\n * This handles anything that embed requires like:\n * - Calling the media preview in embedPreview.\n * - Loading the embed insert.\n * - Getting selected media data.\n * - Handles url and repository uploads.\n * - Reset embed insert when embed preview is deleted.\n * - Handles media embedding into tiny and etc.\n *\n * @module      tiny_media/embed/embedhandler\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from \"../selectors\";\nimport {EmbedInsert} from './embedinsert';\nimport {\n    body,\n    footer,\n    setPropertiesFromData,\n    isValidUrl,\n    stopMediaLoading,\n    startMediaLoading,\n} from '../helpers';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {\n    insertMediaTemplateContext,\n    getHelpStrings,\n    prepareMoodleLang,\n    getMoodleLangObj,\n    hasAudioVideoAttr,\n    insertMediaThumbnailTemplateContext,\n} from \"./embedhelpers\";\nimport Templates from 'core/templates';\nimport {EmbedThumbnailInsert} from './embedthumbnailinsert';\n\nexport class EmbedHandler {\n\n    constructor(data) {\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Load the media insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     */\n    loadTemplatePromise = (templateContext) => {\n        templateContext.elementid = this.editor.id;\n        templateContext.bodyTemplate = Selectors.EMBED.template.body.insertMediaBody;\n        templateContext.footerTemplate = Selectors.EMBED.template.footer.insertMediaFooter;\n        templateContext.selector = Selectors.EMBED.type;\n\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                (new EmbedInsert(this)).init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Load the media thumbnail insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     * @param {HTMLElement} root\n     * @param {object} mediaData\n     */\n    loadInsertThumbnailTemplatePromise = async(templateContext, root, mediaData) => {\n        Promise.all([body(templateContext, root.root), footer(templateContext, root.root)])\n            .then(() => {\n                if (!this.currentModal.insertMediaModal) {\n                    this.currentModal.insertMediaModal = this.currentModal;\n                }\n\n                if (root.uploadThumbnailModal) {\n                    this.currentModal.uploadThumbnailModal = root.uploadThumbnailModal;\n                }\n\n                this.thumbnailModalRoot = root.root;\n                (new EmbedThumbnailInsert(this)).init(mediaData);\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Loads the media preview dialogue.\n     *\n     * @param {object} embedPreview Object of embedPreview\n     * @param {object} templateContext Object of template context\n     */\n    loadMediaDetails = async(embedPreview, templateContext) => {\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                embedPreview.init();\n                return;\n            })\n            .catch(error => {\n                stopMediaLoading(this.root, Selectors.EMBED.type);\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Reset the media/thumbnail insert modal form.\n     *\n     * @param {boolean} isMediaInsert Is current state media insert or thumbnail insert?\n     */\n    resetUploadForm = (isMediaInsert = true) => {\n        if (isMediaInsert) {\n            this.newMediaLink = false;\n            this.fetchedMediaLinkTitle = null;\n            this.resetCurrentMediaData();\n            this.loadTemplatePromise(insertMediaTemplateContext(this));\n        } else {\n            this.loadInsertThumbnailTemplatePromise(\n                insertMediaThumbnailTemplateContext(this), // Get template context for creating media thumbnail.\n                {root: this.thumbnailModalRoot}, // Required root elements.\n                this.mediaData // Get current media data.\n            );\n        }\n    };\n\n    /**\n     * Get selected media data.\n     *\n     * @returns {null|object}\n     */\n    getMediaProperties = () => {\n        const media = this.selectedMedia;\n        if (!media) {\n            return null;\n        }\n\n        const tracks = {\n            subtitles: [],\n            captions: [],\n            descriptions: [],\n            chapters: [],\n            metadata: []\n        };\n        const sources = [];\n\n        media.querySelectorAll('track').forEach((track) => {\n            tracks[track.getAttribute('kind')].push({\n                src: track.getAttribute('src'),\n                srclang: track.getAttribute('srclang'),\n                label: track.getAttribute('label'),\n                defaultTrack: hasAudioVideoAttr(track, 'default')\n            });\n        });\n\n        media.querySelectorAll('source').forEach((source) => {\n            sources.push(source.src);\n        });\n        const title = media.getAttribute('title') ?? media.textContent;\n\n        return {\n            type: this.mediaType,\n            sources,\n            poster: media.getAttribute('poster'),\n            title: title ? title.trim() : false,\n            width: media.getAttribute('width'),\n            height: media.getAttribute('height'),\n            autoplay: hasAudioVideoAttr(media, 'autoplay'),\n            loop: hasAudioVideoAttr(media, 'loop'),\n            muted: hasAudioVideoAttr(media, 'muted'),\n            controls: hasAudioVideoAttr(media, 'controls'),\n            tracks,\n        };\n    };\n\n    /**\n     * Get selected media data.\n     *\n     * @returns {object}\n     */\n    getCurrentEmbedData = () => {\n        const properties = this.getMediaProperties();\n        if (!properties || this.newMediaLink) {\n            return {media: {}};\n        }\n\n        const processedProperties = {};\n        processedProperties.media = properties;\n        processedProperties.link = false;\n\n        return processedProperties;\n    };\n\n    /**\n     * Get help strings for media subtitles and captions.\n     *\n     * @returns {null|object}\n     */\n    getHelpStrings = async() => {\n        if (!this.helpStrings) {\n            this.helpStrings = await getHelpStrings();\n        }\n\n        return this.helpStrings;\n    };\n\n    /**\n     * Set template context for insert media dialogue.\n     *\n     * @param {object} data Object of media data\n     * @returns {object}\n     */\n    getTemplateContext = async(data) => {\n        const languages = prepareMoodleLang(this.editor);\n        const helpIcons = Array.from(Object.entries(await this.getHelpStrings())).forEach(([key, text]) => {\n            data[`${key.toLowerCase()}helpicon`] = {text};\n        });\n\n        return Object.assign({}, {\n            elementid: this.editor.getElement().id,\n            showFilePickerTrack: this.canShowFilePickerTrack,\n            langsInstalled: languages.installed,\n            langsAvailable: languages.available,\n            media: true,\n            isUpdating: this.isUpdating,\n        }, data, helpIcons);\n    };\n\n    /**\n     * Set and get media template context.\n     *\n     * @param {null|object} data Null or object of media data\n     * @returns {Promise<object>} A promise that resolves template context.\n     */\n    getMediaTemplateContext = async(data = null) => {\n        if (!data) {\n            data = Object.assign({}, this.getCurrentEmbedData());\n        } else {\n            if (data.hasOwnProperty('isUpdating')) {\n                this.isUpdating = data.isUpdating;\n            } else {\n                this.isUpdating = Object.keys(data).length > 1;\n            }\n        }\n        return await this.getTemplateContext(data);\n    };\n\n    /**\n     * Handles changes in the media URL input field and loads a preview of the media if the URL has changed.\n     */\n    urlChanged() {\n        const url = this.root.querySelector(Selectors.EMBED.elements.fromUrl).value;\n        if (url && url !== this.currentUrl) {\n            // Set to null on new url change.\n            this.mediaType = null;\n\n            // Flag as new media link insert.\n            this.newMediaLink = true;\n            this.loadMediaPreview(url);\n        }\n    }\n\n    /**\n     * Load the media preview dialogue.\n     *\n     * @param {string} url String of media url\n     */\n    loadMediaPreview = (url) => {\n        (new EmbedInsert(this)).loadMediaPreview(url);\n    };\n\n    /**\n     * Callback for file picker that previews the media or add the captions and subtitles.\n     *\n     * @param {object} params Object of media url and etc\n     * @param {html} element Selected element.\n     * @param {string} fpType Caption type.\n     */\n    trackFilePickerCallback(params, element, fpType) {\n        if (params.url !== '') {\n            const tabPane = element.closest('.tab-pane');\n            if (tabPane) {\n                element.closest(Selectors.EMBED.elements.source).querySelector(Selectors.EMBED.elements.url).value = params.url;\n\n                if (fpType === 'subtitle') {\n                    // If the file is subtitle file. We need to match the language and label for that file.\n                    const subtitleLang = params.file.split('.vtt')[0].split('-').slice(-1)[0];\n                    const langObj = getMoodleLangObj(subtitleLang, this.editor);\n                    if (langObj) {\n                        const track = element.closest(Selectors.EMBED.elements.track);\n                        track.querySelector(Selectors.EMBED.elements.trackLabel).value = langObj.lang.trim();\n                        track.querySelector(Selectors.EMBED.elements.trackLang).value = langObj.code;\n                    }\n                }\n            } else {\n                // Flag as new file upload.\n                this.newFileUpload = true;\n                this.resetCurrentMediaData();\n                this.loadMediaPreview(params.url);\n            }\n        }\n    }\n\n    /**\n     * Reset current media data.\n     */\n    resetCurrentMediaData = () => {\n        // Reset the value of the following props.\n        this.media = {};\n        this.mediaType = null;\n        this.selectedMedia = null;\n    };\n\n    /**\n     * Add new html track element.\n     *\n     * @param {html} element\n     */\n    addTrackComponent(element) {\n        const trackElement = element.closest(Selectors.EMBED.elements.track);\n        const clone = trackElement.cloneNode(true);\n\n        trackElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        trackElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n        trackElement.parentNode.insertBefore(clone, trackElement.nextSibling);\n    }\n\n    /**\n     * Remove added html track element.\n     *\n     * @param {html} element\n     */\n    removeTrackComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.track);\n        sourceElement.remove();\n    }\n\n    /**\n     * Get picker type based on the selected element.\n     *\n     * @param {html} element Selected element\n     * @returns {string}\n     */\n    getFilePickerTypeFromElement = (element) => {\n        if (element.closest(Selectors.EMBED.elements.posterSource)) {\n            return 'image';\n        }\n        if (element.closest(Selectors.EMBED.elements.trackSource)) {\n            return 'subtitle';\n        }\n\n        return 'media';\n    };\n\n    /**\n     * Get captions/subtitles type.\n     *\n     * @param {html} tabPane\n     * @returns {string}\n     */\n    getTrackTypeFromTabPane = (tabPane) => {\n        return tabPane.getAttribute('data-track-kind');\n    };\n\n    /**\n     * Handle click events.\n     *\n     * @param {html} e Selected element\n     */\n    clickHandler = async(e) => {\n        const element = e.target;\n\n        // Handle repository browsing.\n        const mediaBrowser = element.closest(Selectors.EMBED.actions.mediaBrowser);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const fpType = this.getFilePickerTypeFromElement(element);\n            const params = await displayFilepicker(this.editor, fpType);\n            this.trackFilePickerCallback(params, element, fpType);\n        }\n\n        // Handles add media url.\n        const addUrlEle = e.target.closest(Selectors.EMBED.actions.addUrl);\n        if (addUrlEle) {\n            startMediaLoading(this.root, Selectors.EMBED.type);\n            this.urlChanged();\n        }\n\n        // Handles adding tracks.\n        const addComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .addcomponent');\n        if (addComponentTrackAction) {\n            e.preventDefault();\n            this.addTrackComponent(element);\n        }\n\n        // Handles removing added tracks.\n        const removeComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .removecomponent');\n        if (removeComponentTrackAction) {\n            e.preventDefault();\n            this.removeTrackComponent(element);\n        }\n\n        // Only allow one track per tab to be selected as \"default\".\n        const trackDefaultAction = element.closest(Selectors.EMBED.elements.trackDefault);\n        if (trackDefaultAction && trackDefaultAction.checked) {\n            const getKind = (el) => this.getTrackTypeFromTabPane(el.parentElement.closest('.tab-pane'));\n\n            element.parentElement\n                .closest('.tab-content')\n                .querySelectorAll(Selectors.EMBED.elements.trackDefault)\n                .forEach((select) => {\n                    if (select !== element && getKind(element) === getKind(select)) {\n                        select.checked = false;\n                    }\n                });\n        }\n    };\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     *\n     * @param {html} input Url input field\n     * @param {object} root\n     */\n    toggleUrlButton(input, root) {\n        const url = input.value;\n        const addUrl = root.querySelector(Selectors.EMBED.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && isValidUrl(url));\n    }\n\n    /**\n     * Get media html to be inserted or updated into tiny.\n     *\n     * @param {html} form Selected element\n     * @returns {string} String of html\n     */\n    getMediaHTML = (form) => {\n        this.mediaType = this.root.querySelector(Selectors.EMBED.elements.mediaPreviewContainer).dataset.mediaType;\n        const tabContent = form.querySelector('.tab-content');\n        const callback = 'getMediaHTML' + this.mediaType[0].toUpperCase() + this.mediaType.substr(1);\n        return this[callback](tabContent);\n    };\n\n    /**\n     * Get media as link.\n     *\n     * @returns {string} String of html.\n     */\n    getMediaHTMLLink() {\n        const mediaPreviewContainer = document.querySelector(Selectors.EMBED.elements.mediaPreviewContainer);\n        const context = {\n            name: document.querySelector(Selectors.EMBED.elements.title).value ?? mediaPreviewContainer.dataset.originalUrl,\n            url: mediaPreviewContainer.dataset.originalUrl || false\n        };\n\n        return context.url ? Templates.renderForPromise('tiny_media/embed/embed_media_link', context) : '';\n    }\n\n    /**\n     * Get media as video.\n     *\n     * @param {html} tab Selected element\n     * @returns {string} String of html.\n     */\n    getMediaHTMLVideo = (tab) => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const context = this.getContextForMediaHTML(tab, details);\n        context.width = details.querySelector(Selectors.EMBED.elements.width).value || false;\n        context.height = details.querySelector(Selectors.EMBED.elements.height).value || false;\n\n        const mediaPreviewContainer = details.querySelector(Selectors.EMBED.elements.mediaPreviewContainer);\n        context.poster = mediaPreviewContainer.dataset.mediaPoster || false;\n        return context.sources ? Templates.renderForPromise('tiny_media/embed/embed_media_video', context) : '';\n    };\n\n    /**\n     * Get media as audio.\n     *\n     * @param {html} tab Selected element\n     * @returns {string} String of html.\n     */\n    getMediaHTMLAudio = (tab) => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const context = this.getContextForMediaHTML(tab, details);\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed/embed_media_audio', context) : '';\n    };\n\n    /**\n     * Get previewed media data.\n     *\n     * @param {html} tab Selected element\n     * @param {html} details Selected element\n     * @returns {object}\n     */\n    getContextForMediaHTML = (tab, details) => {\n        const tracks = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.track)).map(track => {\n            const langTrack = track.querySelector(Selectors.EMBED.elements.trackLang);\n            const selectedLangTrack = langTrack.options[langTrack.selectedIndex];\n\n            return {\n                track: track.querySelector(Selectors.EMBED.elements.trackSource + ' ' + Selectors.EMBED.elements.url).value,\n                kind: this.getTrackTypeFromTabPane(track.closest('.tab-pane')),\n                label: track.querySelector(Selectors.EMBED.elements.trackLabel).value || langTrack.value,\n                srclang: selectedLangTrack.dataset.languageCode ?? false,\n                defaultTrack: track.querySelector(Selectors.EMBED.elements.trackDefault).checked ? \"true\" : null\n            };\n        }).filter((track) => !!track.track);\n\n        const mediaPreviewContainer = details.querySelector(Selectors.EMBED.elements.mediaPreviewContainer);\n        let sources = mediaPreviewContainer.dataset.originalUrl ?? null;\n\n        // Let's check if media has more than one sources.\n        if (this.alternativeSources) {\n            // Always update the first item in this.alternativeSources to the new one.\n            this.alternativeSources[0] = sources;\n            // Override the sources to have all the updated sources.\n            sources = this.alternativeSources;\n        }\n\n        const title = details.querySelector(Selectors.EMBED.elements.title).value;\n        // Remove data-original-url attribute once it's extracted.\n        mediaPreviewContainer.removeAttribute('data-original-url');\n\n        const templateContext = {\n            sources,\n            tracks,\n            showControls: details.querySelector(Selectors.EMBED.elements.mediaControl).checked,\n            autoplay: details.querySelector(Selectors.EMBED.elements.mediaAutoplay).checked,\n            muted: details.querySelector(Selectors.EMBED.elements.mediaMute).checked,\n            loop: details.querySelector(Selectors.EMBED.elements.mediaLoop).checked,\n            title: title !== '' ? title.trim() : false,\n        };\n\n        // Add description prop to templateContext if media type is \"link\".\n        if (this.mediaType === 'link') {\n            // Let's form an alternative title.\n            templateContext.description = Array.isArray(sources) ? sources[0] : sources;\n        }\n\n        return templateContext;\n    };\n\n    /**\n     * Handle the insert/update media in tiny editor.\n     *\n     * @param {event} event\n     * @param {object} modal Object of current modal\n     */\n    handleDialogueSubmission = async(event, modal) => {\n        const {html} = await this.getMediaHTML(modal.getRoot()[0]);\n        if (html) {\n            if (this.isUpdating) {\n                this.selectedMedia.outerHTML = html;\n                this.isUpdating = false;\n            } else {\n                this.editor.insertContent(html);\n            }\n        }\n    };\n\n    /**\n     * Register insert media modal elements' events.\n     */\n    registerEventListeners = async() => {\n        // Handles click events for insert media modal.\n        if (this.canShowFilePickerTrack) {\n            this.root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        // Handles media adding using url input.\n        this.root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.EMBED.elements.fromUrl);\n            if (urlEle) {\n                this.toggleUrlButton(urlEle, this.root);\n            }\n        });\n\n        // Destroy created modal when it's closed.\n        this.modalRoot.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n\n        // Handles media insert to editor.\n        this.modalRoot.on(ModalEvents.save, this.handleDialogueSubmission.bind(this));\n    };\n}\n"],"names":["constructor","data","this","loadTemplatePromise","templateContext","elementid","editor","id","bodyTemplate","Selectors","EMBED","template","body","insertMediaBody","footerTemplate","footer","insertMediaFooter","selector","type","Promise","all","root","then","EmbedInsert","init","catch","error","window","console","log","loadInsertThumbnailTemplatePromise","async","mediaData","currentModal","insertMediaModal","uploadThumbnailModal","thumbnailModalRoot","EmbedThumbnailInsert","loadMediaDetails","embedPreview","resetUploadForm","isMediaInsert","_this","newMediaLink","fetchedMediaLinkTitle","resetCurrentMediaData","getMediaProperties","media","selectedMedia","tracks","subtitles","captions","descriptions","chapters","metadata","sources","querySelectorAll","forEach","track","getAttribute","push","src","srclang","label","defaultTrack","source","title","textContent","mediaType","poster","trim","width","height","autoplay","loop","muted","controls","getCurrentEmbedData","properties","processedProperties","link","getHelpStrings","helpStrings","getTemplateContext","languages","helpIcons","Array","from","Object","entries","_ref","key","text","toLowerCase","assign","getElement","showFilePickerTrack","canShowFilePickerTrack","langsInstalled","installed","langsAvailable","available","isUpdating","getMediaTemplateContext","hasOwnProperty","_this2","keys","length","urlChanged","url","querySelector","elements","fromUrl","value","currentUrl","loadMediaPreview","trackFilePickerCallback","params","element","fpType","closest","subtitleLang","file","split","slice","langObj","trackLabel","lang","trackLang","code","newFileUpload","addTrackComponent","trackElement","clone","cloneNode","classList","remove","add","parentNode","insertBefore","nextSibling","removeTrackComponent","getFilePickerTypeFromElement","posterSource","trackSource","getTrackTypeFromTabPane","tabPane","clickHandler","e","target","actions","mediaBrowser","preventDefault","addUrl","trackDefaultAction","trackDefault","checked","getKind","el","parentElement","select","toggleUrlButton","input","disabled","getMediaHTML","form","mediaPreviewContainer","dataset","tabContent","toUpperCase","substr","getMediaHTMLLink","document","context","name","originalUrl","Templates","renderForPromise","getMediaHTMLVideo","tab","details","mediaDetailsBody","getContextForMediaHTML","mediaPoster","getMediaHTMLAudio","map","langTrack","selectedLangTrack","options","selectedIndex","kind","languageCode","filter","alternativeSources","removeAttribute","showControls","mediaControl","mediaAutoplay","mediaMute","mediaLoop","description","isArray","handleDialogueSubmission","event","modal","html","getRoot","outerHTML","insertContent","registerEventListeners","addEventListener","bind","urlEle","modalRoot","on","ModalEvents","hidden","destroy","save"],"mappings":";;;;;;;;;;;;;;;w3BAwDIA,YAAYC,yCACcC,KAAMD,MAQhCE,oBAAuBC,kBACnBA,gBAAgBC,UAAYH,KAAKI,OAAOC,GACxCH,gBAAgBI,aAAeC,mBAAUC,MAAMC,SAASC,KAAKC,gBAC7DT,gBAAgBU,eAAiBL,mBAAUC,MAAMC,SAASI,OAAOC,kBACjEZ,gBAAgBa,SAAWR,mBAAUC,MAAMQ,KAE3CC,QAAQC,IAAI,EAAC,iBAAKhB,gBAAiBF,KAAKmB,OAAO,mBAAOjB,gBAAiBF,KAAKmB,QACvEC,MAAK,SACGC,yBAAYrB,MAAOsB,UAG3BC,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,WAW/BI,mCAAqCC,MAAM3B,gBAAiBiB,KAAMW,aAC9Db,QAAQC,IAAI,EAAC,iBAAKhB,gBAAiBiB,KAAKA,OAAO,mBAAOjB,gBAAiBiB,KAAKA,QACvEC,MAAK,KACGpB,KAAK+B,aAAaC,wBACdD,aAAaC,iBAAmBhC,KAAK+B,cAG1CZ,KAAKc,4BACAF,aAAaE,qBAAuBd,KAAKc,2BAG7CC,mBAAqBf,KAAKA,SAC1BgB,2CAAqBnC,MAAOsB,KAAKQ,cAGzCP,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,WAU/BY,iBAAmBP,MAAMQ,aAAcnC,mBACnCe,QAAQC,IAAI,EAAC,iBAAKhB,gBAAiBF,KAAKmB,OAAO,mBAAOjB,gBAAiBF,KAAKmB,QACvEC,MAAK,KACFiB,aAAaf,UAGhBC,OAAMC,sCACcxB,KAAKmB,KAAMZ,mBAAUC,MAAMQ,MAC5CS,OAAOC,QAAQC,IAAIH,WAS/Bc,4CAAkB,eAACC,yEACXA,eACAC,MAAKC,cAAe,EACpBD,MAAKE,sBAAwB,KAC7BF,MAAKG,wBACLH,MAAKvC,qBAAoB,4CAA2BuC,SAEpDA,MAAKZ,oCACD,qDAAoCY,OACpC,CAACrB,KAAMqB,MAAKN,oBACZM,MAAKV,gBAUjBc,mBAAqB,WACXC,MAAQ7C,KAAK8C,kBACdD,aACM,WAGLE,OAAS,CACXC,UAAW,GACXC,SAAU,GACVC,aAAc,GACdC,SAAU,GACVC,SAAU,IAERC,QAAU,GAEhBR,MAAMS,iBAAiB,SAASC,SAASC,QACrCT,OAAOS,MAAMC,aAAa,SAASC,KAAK,CACpCC,IAAKH,MAAMC,aAAa,OACxBG,QAASJ,MAAMC,aAAa,WAC5BI,MAAOL,MAAMC,aAAa,SAC1BK,cAAc,mCAAkBN,MAAO,gBAI/CX,MAAMS,iBAAiB,UAAUC,SAASQ,SACtCV,QAAQK,KAAKK,OAAOJ,cAElBK,MAAQnB,MAAMY,aAAa,UAAYZ,MAAMoB,kBAE5C,CACHjD,KAAMhB,KAAKkE,UACXb,QAAAA,QACAc,OAAQtB,MAAMY,aAAa,UAC3BO,QAAOA,OAAQA,MAAMI,OACrBC,MAAOxB,MAAMY,aAAa,SAC1Ba,OAAQzB,MAAMY,aAAa,UAC3Bc,UAAU,mCAAkB1B,MAAO,YACnC2B,MAAM,mCAAkB3B,MAAO,QAC/B4B,OAAO,mCAAkB5B,MAAO,SAChC6B,UAAU,mCAAkB7B,MAAO,YACnCE,OAAAA,SASR4B,oBAAsB,WACZC,WAAa5E,KAAK4C,yBACnBgC,YAAc5E,KAAKyC,mBACb,CAACI,MAAO,UAGbgC,oBAAsB,UAC5BA,oBAAoBhC,MAAQ+B,WAC5BC,oBAAoBC,MAAO,EAEpBD,qBAQXE,eAAiBlD,UACR7B,KAAKgF,mBACDA,kBAAoB,mCAGtBhF,KAAKgF,aAShBC,mBAAqBpD,MAAAA,aACXqD,WAAY,mCAAkBlF,KAAKI,QACnC+E,UAAYC,MAAMC,KAAKC,OAAOC,cAAcvF,KAAK+E,mBAAmBxB,SAAQiC,WAAEC,IAAKC,WACrF3F,KAAM,GAAE0F,IAAIE,yBAA2B,CAACD,KAAAA,gBAGrCJ,OAAOM,OAAO,GAAI,CACrBzF,UAAWH,KAAKI,OAAOyF,aAAaxF,GACpCyF,oBAAqB9F,KAAK+F,uBAC1BC,eAAgBd,UAAUe,UAC1BC,eAAgBhB,UAAUiB,UAC1BtD,OAAO,EACPuD,WAAYpG,KAAKoG,YAClBrG,KAAMoF,YASbkB,qDAA0BxE,qBAAM9B,4DAAO,YAC9BA,KAGGA,KAAKuG,eAAe,cACpBC,OAAKH,WAAarG,KAAKqG,WAEvBG,OAAKH,WAAad,OAAOkB,KAAKzG,MAAM0G,OAAS,EALjD1G,KAAOuF,OAAOM,OAAO,GAAIW,OAAK5B,6BAQrB4B,OAAKtB,mBAAmBlF,WAMzC2G,mBACUC,IAAM3G,KAAKmB,KAAKyF,cAAcrG,mBAAUC,MAAMqG,SAASC,SAASC,MAClEJ,KAAOA,MAAQ3G,KAAKgH,kBAEf9C,UAAY,UAGZzB,cAAe,OACfwE,iBAAiBN,MAS9BM,iBAAoBN,UACXtF,yBAAYrB,MAAOiH,iBAAiBN,MAU7CO,wBAAwBC,OAAQC,QAASC,WAClB,KAAfF,OAAOR,IAAY,IACHS,QAAQE,QAAQ,iBAE5BF,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAAS9C,QAAQ6C,cAAcrG,mBAAUC,MAAMqG,SAASF,KAAKI,MAAQI,OAAOR,IAE7F,aAAXU,OAAuB,OAEjBE,aAAeJ,OAAOK,KAAKC,MAAM,QAAQ,GAAGA,MAAM,KAAKC,OAAO,GAAG,GACjEC,SAAU,kCAAiBJ,aAAcvH,KAAKI,WAChDuH,QAAS,OACHnE,MAAQ4D,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASrD,OACvDA,MAAMoD,cAAcrG,mBAAUC,MAAMqG,SAASe,YAAYb,MAAQY,QAAQE,KAAKzD,OAC9EZ,MAAMoD,cAAcrG,mBAAUC,MAAMqG,SAASiB,WAAWf,MAAQY,QAAQI,iBAK3EC,eAAgB,OAChBrF,6BACAsE,iBAAiBE,OAAOR,MAQzChE,sBAAwB,UAEfE,MAAQ,QACRqB,UAAY,UACZpB,cAAgB,MAQzBmF,kBAAkBb,eACRc,aAAed,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASrD,OACxD2E,MAAQD,aAAaE,WAAU,GAErCF,aAAatB,cAAc,4BAA4ByB,UAAUC,OAAO,UACxEJ,aAAatB,cAAc,yBAAyByB,UAAUE,IAAI,UAClEL,aAAaM,WAAWC,aAAaN,MAAOD,aAAaQ,aAQ7DC,qBAAqBvB,SACKA,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASrD,OACjD8E,SASlBM,6BAAgCxB,SACxBA,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASgC,cAClC,QAEPzB,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASiC,aAClC,WAGJ,QASXC,wBAA2BC,SAChBA,QAAQvF,aAAa,mBAQhCwF,aAAepH,MAAAA,UACLuF,QAAU8B,EAAEC,UAGG/B,QAAQE,QAAQ/G,mBAAUC,MAAM4I,QAAQC,cAC3C,CACdH,EAAEI,uBACIjC,OAASrH,KAAK4I,6BAA6BxB,SAC3CD,aAAe,4BAAkBnH,KAAKI,OAAQiH,aAC/CH,wBAAwBC,OAAQC,QAASC,QAIhC6B,EAAEC,OAAO7B,QAAQ/G,mBAAUC,MAAM4I,QAAQG,yCAErCvJ,KAAKmB,KAAMZ,mBAAUC,MAAMQ,WACxC0F,cAIuBU,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASrD,MAAQ,oBAE7E0F,EAAEI,sBACGrB,kBAAkBb,UAIQA,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAASrD,MAAQ,uBAEhF0F,EAAEI,sBACGX,qBAAqBvB,gBAIxBoC,mBAAqBpC,QAAQE,QAAQ/G,mBAAUC,MAAMqG,SAAS4C,iBAChED,oBAAsBA,mBAAmBE,QAAS,OAC5CC,QAAWC,IAAO5J,KAAK+I,wBAAwBa,GAAGC,cAAcvC,QAAQ,cAE9EF,QAAQyC,cACHvC,QAAQ,gBACRhE,iBAAiB/C,mBAAUC,MAAMqG,SAAS4C,cAC1ClG,SAASuG,SACFA,SAAW1C,SAAWuC,QAAQvC,WAAauC,QAAQG,UACnDA,OAAOJ,SAAU,QAYrCK,gBAAgBC,MAAO7I,YACbwF,IAAMqD,MAAMjD,MACH5F,KAAKyF,cAAcrG,mBAAUC,MAAM4I,QAAQG,QACnDU,WAAqB,KAARtD,MAAc,uBAAWA,MASjDuD,aAAgBC,YACPjG,UAAYlE,KAAKmB,KAAKyF,cAAcrG,mBAAUC,MAAMqG,SAASuD,uBAAuBC,QAAQnG,gBAC3FoG,WAAaH,KAAKvD,cAAc,uBAE/B5G,KADU,eAAiBA,KAAKkE,UAAU,GAAGqG,cAAgBvK,KAAKkE,UAAUsG,OAAO,IACpEF,aAQ1BG,yBACUL,sBAAwBM,SAAS9D,cAAcrG,mBAAUC,MAAMqG,SAASuD,uBACxEO,QAAU,CACZC,KAAMF,SAAS9D,cAAcrG,mBAAUC,MAAMqG,SAAS7C,OAAO+C,OAASqD,sBAAsBC,QAAQQ,YACpGlE,IAAKyD,sBAAsBC,QAAQQ,cAAe,UAG/CF,QAAQhE,IAAMmE,mBAAUC,iBAAiB,oCAAqCJ,SAAW,GASpGK,kBAAqBC,YACXC,QAAUR,SAAS9D,cAAcrG,mBAAUC,MAAMqG,SAASsE,kBAC1DR,QAAU3K,KAAKoL,uBAAuBH,IAAKC,SACjDP,QAAQtG,MAAQ6G,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASxC,OAAO0C,QAAS,EAC/E4D,QAAQrG,OAAS4G,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASvC,QAAQyC,QAAS,QAE3EqD,sBAAwBc,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASuD,8BAC7EO,QAAQxG,OAASiG,sBAAsBC,QAAQgB,cAAe,EACvDV,QAAQtH,QAAUyH,mBAAUC,iBAAiB,qCAAsCJ,SAAW,IASzGW,kBAAqBL,YACXC,QAAUR,SAAS9D,cAAcrG,mBAAUC,MAAMqG,SAASsE,kBAC1DR,QAAU3K,KAAKoL,uBAAuBH,IAAKC,gBAC1CP,QAAQtH,QAAQoD,OAASqE,mBAAUC,iBAAiB,qCAAsCJ,SAAW,IAUhHS,uBAAyB,CAACH,IAAKC,iBACrBnI,OAASqC,MAAMC,KAAK4F,IAAI3H,iBAAiB/C,mBAAUC,MAAMqG,SAASrD,QAAQ+H,KAAI/H,cAC1EgI,UAAYhI,MAAMoD,cAAcrG,mBAAUC,MAAMqG,SAASiB,WACzD2D,kBAAoBD,UAAUE,QAAQF,UAAUG,qBAE/C,CACHnI,MAAOA,MAAMoD,cAAcrG,mBAAUC,MAAMqG,SAASiC,YAAc,IAAMvI,mBAAUC,MAAMqG,SAASF,KAAKI,MACtG6E,KAAM5L,KAAK+I,wBAAwBvF,MAAM8D,QAAQ,cACjDzD,MAAOL,MAAMoD,cAAcrG,mBAAUC,MAAMqG,SAASe,YAAYb,OAASyE,UAAUzE,MACnFnD,QAAS6H,kBAAkBpB,QAAQwB,eAAgB,EACnD/H,aAAcN,MAAMoD,cAAcrG,mBAAUC,MAAMqG,SAAS4C,cAAcC,QAAU,OAAS,SAEjGoC,QAAQtI,SAAYA,MAAMA,QAEvB4G,sBAAwBc,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASuD,2BACzE/G,QAAU+G,sBAAsBC,QAAQQ,aAAe,KAGvD7K,KAAK+L,0BAEAA,mBAAmB,GAAK1I,QAE7BA,QAAUrD,KAAK+L,0BAGb/H,MAAQkH,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAAS7C,OAAO+C,MAEpEqD,sBAAsB4B,gBAAgB,2BAEhC9L,gBAAkB,CACpBmD,QAAAA,QACAN,OAAAA,OACAkJ,aAAcf,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASqF,cAAcxC,QAC3EnF,SAAU2G,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASsF,eAAezC,QACxEjF,MAAOyG,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASuF,WAAW1C,QACjElF,KAAM0G,QAAQtE,cAAcrG,mBAAUC,MAAMqG,SAASwF,WAAW3C,QAChE1F,MAAiB,KAAVA,OAAeA,MAAMI,cAIT,SAAnBpE,KAAKkE,YAELhE,gBAAgBoM,YAAclH,MAAMmH,QAAQlJ,SAAWA,QAAQ,GAAKA,SAGjEnD,iBASXsM,yBAA2B3K,MAAM4K,MAAOC,eAC9BC,KAACA,YAAc3M,KAAKkK,aAAawC,MAAME,UAAU,IACnDD,OACI3M,KAAKoG,iBACAtD,cAAc+J,UAAYF,UAC1BvG,YAAa,QAEbhG,OAAO0M,cAAcH,QAQtCI,uBAAyBlL,UAEjB7B,KAAK+F,6BACA5E,KAAK6L,iBAAiB,QAAShN,KAAKiJ,aAAagE,KAAKjN,YAI1DmB,KAAK6L,iBAAiB,SAAU9D,UAC3BgE,OAAShE,EAAEC,OAAO7B,QAAQ/G,mBAAUC,MAAMqG,SAASC,SACrDoG,aACKnD,gBAAgBmD,OAAQlN,KAAKmB,cAKrCgM,UAAUC,GAAGC,YAAYC,QAAQ,UAC7BvL,aAAawL,kBAIjBJ,UAAUC,GAAGC,YAAYG,KAAMxN,KAAKwM,yBAAyBS,KAAKjN"}